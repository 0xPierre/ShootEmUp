#pragma once

#include "Settings.h"
typedef struct Scene_s Scene;

/// @brief Structure représentant un gestionnaire des entrées utilisateur.
typedef struct Input_s
{
    Scene* scene;
    /// @brief Booléen indiquant si le bouton "quitter" (croix en haut à droite) vient d'être pressé.
    bool quitPressed;

    /// @brief Boolean indiquant si la touche echap a été pressé
    bool escPressed;

    /// @brief Booléen indiquant si la touche de tir vient d'être pressée.
    bool shootPressed;

    /// @brief Booléen indiquant si la touche toggelant l'invicibilité vient d'être pressée.
    bool invincibilityPressed;

    /// @brief Nombre indiquant le déplacement horizontal du joueur.
    /// Les valeurs pour un clavier ou un joystick sont dans l'intervalle
    /// [-1.0f, 1.0f].
    /// La valeur 0.0f désigne la position par défaut.
    /// Une valeur négative désigne un déplacement vers la gauche.
    /// Une valeur positive désigne un déplacement vers la droite.
    float hAxis;

    /// @brief Nombre indiquant le déplacement vertical du joueur.
    /// Les valeurs pour un clavier ou un joystick sont dans l'intervalle
    /// [-1.0f, 1.0f].
    /// La valeur 0.0f désigne la position par défaut.
    /// Une valeur négative désigne un déplacement vers le bas.
    /// Une valeur positive désigne un déplacement vers le haut.
    float vAxis;

    /// @brief Si l'état est true, alors il faut que la touche repasse en keyup ou en 0 ( manette ) pour pouvoir etre renvoyé, vzy je sais c pas clair mais il est 1h du mat et c'est à rendre tout à l'heure, je veux aller dormir et plus sûr on va avoir eval surprise d'analyse jvais avoir 3
    bool isMenuKeyBLocked;

    SDL_Joystick* gameController;
} Input;

/// @brief Crée un nouveau gestionnaire des entrées utilisateur.
/// @return Le gestionnaire créé.
Input *Input_New(Scene* scene);

/// @brief Détruit un gestionnaire des entrées utilisateur.
/// @param self le gestionnaire.
void Input_Delete(Input *self);

/// @brief Met à jour le gestionnaire des entrées utilisateur.
/// Cette fonction effectue la boucle des événement SDL.
/// @param self le gestionnaire.
void Input_Update(Input *self);
